syntax = "proto3";

package event;

option go_package = "github.com/rx3lixir/gateway-service/gateway-grpc/gen/go/event";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// ============================================================================
// СОБЫТИЯ (EVENTS)
// ============================================================================

// Запрос на создание события (без ID, CreatedAt, UpdatedAt)
message CreateEventReq {
  string name = 1;
  string description = 2;
  int64 categoryID = 3;
  string time = 4; // Представление времени как строки
  string date = 5; // Представление даты как строки
  string location = 6;
  float price = 7;
  string image = 8;  // URL или идентификатор изображения
  string source = 9; // Источник события
}

// Запрос на обновление события
message UpdateEventReq {
  int64 id = 1; // ID обновляемого события
  string name = 2;
  string description = 3;
  int64 categoryID = 4;
  string time = 5;
  string date = 6;
  string location = 7;
  float price = 8;
  string image = 9;
  string source = 10;
}

// Запрос на получение события по ID
message GetEventReq { int64 id = 1; }

// Запрос на удаление события по ID
message DeleteEventReq { int64 id = 1; }

// Запрос на получение списка событий с фильтрами и пагинацией
message ListEventsReq {
  // Фильтры
  repeated int64 categoryIDs = 1;  // Фильтр по категориям
  optional float min_price = 2;    // Минимальная цена
  optional float max_price = 3;    // Максимальная цена
  optional string date_from = 4;   // Дата от (YYYY-MM-DD)
  optional string date_to = 5;     // Дата до (YYYY-MM-DD)
  optional string location = 6;    // Фильтр по локации
  optional string source = 7;      // Фильтр по источнику
  optional string search_text = 8; // Полнотекстовый поиск

  // Пагинация
  optional int32 limit = 9;   // Лимит записей
  optional int32 offset = 10; // Смещение

  // Дополнительные опции
  optional bool include_count = 11; // Включить общее количество
}

// Ответ с данными события
message EventRes {
  int64 id = 1;
  string name = 2;
  string description = 3;
  int64 categoryID = 4;
  string time = 5;
  string date = 6;
  string location = 7;
  float price = 8;
  string image = 9;
  string source = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
}

// Ответ со списком событий
message ListEventsRes {
  repeated EventRes events = 1;
  optional PaginationMeta pagination = 2;
}

// Мета-информация для пагинации
message PaginationMeta {
  int64 total_count = 1; // Общее количество записей
  int32 limit = 2;       // Лимит на страницу  
  int32 offset = 3;      // Текущее смещение
  bool has_more = 4;     // Есть ли еще записи
}

// ============================================================================
// ПРЕДЛОЖЕНИЯ (SUGGESTIONS)
// ============================================================================

message SuggestionReq {
  string query = 1;
  int32 max_results = 2;
  repeated string fields = 3;
}

message SuggestionItem {
  string text = 1;
  double score = 2;
  string type = 3;
  optional string category = 4;
  optional int64 event_id = 5;
}

message SuggestionRes {
  repeated SuggestionItem suggestions = 1;
  string query = 2;
  int32 total = 3;
}

// ============================================================================
// КАТЕГОРИИ (CATEGORIES)
// ============================================================================

// Запрос на создание категории
message CreateCategoryReq { string name = 1; }

// Запрос на обновление категории
message UpdateCategoryReq {
  int32 id = 1;
  string name = 2;
}

// Запрос на получение категории по ID
message GetCategoryReq { int32 id = 1; }

// Запрос на удаление категории
message DeleteCategoryReq { int32 id = 1; }

// Запрос на получение списка категорий
message ListCategoriesReq {
  // Пустой запрос, можно добавить фильтры и пагинацию в будущем
}

// Представление категории в ответе
message CategoryRes {
  int32 id = 1;
  string name = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
}

// Ответ со списком категорий
message ListCategoriesRes { repeated CategoryRes categories = 1; }

// ============================================================================
// СЕРВИС
// ============================================================================

service EventService {
  // Операции с событиями
  rpc CreateEvent(CreateEventReq) returns (EventRes);
  rpc GetEvent(GetEventReq) returns (EventRes);
  rpc ListEvents(ListEventsReq) returns (ListEventsRes);
  rpc UpdateEvent(UpdateEventReq) returns (EventRes);
  rpc DeleteEvent(DeleteEventReq) returns (google.protobuf.Empty);

  // Операции предложения 
  rpc GetSuggestions(SuggestionReq) returns (SuggestionRes);

  // Операции с категориями
  rpc CreateCategory(CreateCategoryReq) returns (CategoryRes);
  rpc GetCategory(GetCategoryReq) returns (CategoryRes);
  rpc ListCategories(ListCategoriesReq) returns (ListCategoriesRes);
  rpc UpdateCategory(UpdateCategoryReq) returns (CategoryRes);
  rpc DeleteCategory(DeleteCategoryReq) returns (google.protobuf.Empty);
}
